# Makefile for FBA, for use with GNU make (Cygwin/MinGW)
#
# The first pass makes sure all intermediary targets are present. The second pass updates
# any targets, if necessary. (Intermediary) targets which have their own unique rules
# are generated as required.

#
#	Flags. Uncomment any of these declarations to enable their function.
#

# Specify the name of the executable file, without ".exe"
NAME		= fbnsdl
EXE		= $(NAME)
INSTALLDIR	= /usr/local/games/fbneo/
ROMDIR		= /usr/local/share/roms/
BINDIR		= /usr/local/bin/
LIBDIR		= /usr/local/lib/
FILES		= fbnsdl.ini gamelist.txt fb.png

# Check for changes in header files
DEPEND = 1

#
#	Declare variables
#

ifndef	CPUTYPE
	CPUTYPE	= i686
endif

ifdef BUILD_X86_ASM
	MMX	= 1
else
	MMX	= 0
endif

ifdef	DEBUG
	NAME := $(NAME)d
else
	NAME := $(NAME)
endif

ifeq	($(CPUTYPE),i686)
	ppro = ppro

endif

ifneq	($(CPUTYPE),i686)
	NAME := $(NAME)$(CPUTYPE)
endif

ifeq ($(OS),Windows_NT)

ifdef BUILD_X86_ASM
ARCH = i386
FILEFORMAT = win32
else
ARCH = x86_64
FILEFORMAT = win64
endif

else

ifdef BUILD_X86_ASM
ARCH = i386
FILEFORMAT = elf32
else
ARCH = x86_64
FILEFORMAT = elf64
endif

endif

#
#	Specify paths/files
#

objdir	= obj/GNU_SDL/$(NAME)/
srcdir	= src/

alldir	= burn \
		burn/devices \
		burn/drv \
		burn/drv/pre90s \
		burn/snd \
		burner \
		burner/sdl \
		intf \
		intf/audio \
		intf/audio/sdl \
		intf/cd \
		intf/cd/sdl \
		intf/input \
		intf/input/sdl \
		intf/video \
		intf/video/sdl \
		intf/video/scalers \
		cpu \
		cpu/a68k \
		cpu/adsp2100 \
		cpu/arm \
		cpu/arm7 \
		cpu/h6280 \
		cpu/hd6309 \
		cpu/i8039 \
		cpu/i8051 \
		cpu/i8x41 \
		cpu/konami \
		cpu/m6502 \
		cpu/m6800 \
		cpu/m6805 \
		cpu/m6809 \
		cpu/m68k \
		cpu/mips3 \
		cpu/nec \
		cpu/pic16c5x \
		cpu/s2650 \
		cpu/sh2 \
		cpu/tlcs90 \
		cpu/tms32010 \
		cpu/tms34010 \
		cpu/upd7725 \
		cpu/upd7810 \
		cpu/v60 \
		cpu/z180 \
		cpu/z80 \
		dep/kaillera/client \
		dep/libs/lib7z \
		dep/libs/libpng \
		dep/libs/zlib \
		dep/mingw/include \
		dep/scripts \
		dep/vc/include \
		dep/generated

incdir	= $(foreach dir,$(alldir),-I$(srcdir)$(dir)) -I$(objdir)dep/generated -I/local/include -I/include/SDL2

ifeq ($(OS),Windows_NT)
ifeq ($(ARCH), i386)
lib	= -static-libgcc -static-libstdc++ -lpng -lmingw32 -Wl,-Bdynamic -lSDL2 -lz -lopengl32 -lglu32
else
lib	= -static -lstdc++ -lpng -lmingw -Wl,-Bdynamic -lSDL2 -lz -lopengl -lglu
endif
else
ifeq ($(ARCH), i386)
lib	= -lSDL2
#lib	= -L/usr/lib/x86_64-linux-gnu -lstdc++ -lSDL2 -lGL -lGLU -lz
else
lib	= -L/usr/lib/x86_64-linux-gnu -lstdc++ -lSDL2 -lGL -lGLU -lz
endif
endif


drvobj	+= \
		d_galaga.o   \
		d_parent.o 

#burner/sdl
depobj	+= \
		main.o drv.o run.o \
		media.o support_paths.o ips_manager.o \
		inpdipsw.o stringset.o
#		neocdlist.o 
#burner
depobj	+= \
		bzip.o ioapi.o unzip.o zipfn.o \
		misc.o gamc.o gami.o cong.o 
#burn
depobj	+= \
		burn.o burn_bitmap.o burn_memory.o burn_sound.o \
		load.o timer.o \
		cheat.o debug_track.o hiscore.o \
		tilemap_generic.o tiles_generic.o 
#burn/devices
depobj 	+= \
		earom.o 
#burn/snd
depobj	+= \
		namco_snd.o samples.o 
#cpu
depobj	+= \
		m68000_intf.o z80_intf.o 
#cpu/z80
depobj	+= \
		z80.o z80ctc.o z80pio.o z80daisy.o 
#intf
depobj	+= \
		interface.o
#intf/aud
depobj	+= \
		aud_interface.o
#intf/aud/sdl
depobj	+= \
		aud_sdl.o
#intf/vid
depobj	+= \
		vid_interface.o vid_softfx.o vid_support.o 
#intf/vid/sdl
depobj	+= \
		vid_sdlfx.o vid_sdlopengl.o
#intf/vid/scalers
depobj	+= \
		hq2xs.o hq2xs_16.o 2xsai.o xbr.o epx.o ddt3x.o
#intf/input
depobj	+= \
		inp_interface.o
#intf/input/sdl
depobj	+= \
		inp_sdl.o
#intf/cd
depobj	+= \
		cd_interface.o
#intf/cd/sdl
depobj	+= \
		cd_isowav.o cdsound.o 
#dep/lib/zlib
depobj	+= \
		adler32.o compress.o crc32.o deflate.o gzclose.o gzlib.o gzread.o gzwrite.o infback.o \
		inffast.o inflate.o inftrees.o trees.o uncompr.o zutil.o 
#burn/drv
depobj	+= \
		$(drvobj) 

autobj += $(depobj)

ifdef	BUILD_X86_ASM
autobj += burn_sound_a.o eagle_fm.o 2xsaimmx.o hq2x32.o hq3x32.o hq4x32.o superscale.o
endif
 
autdep	= $(depobj:.o=.d)

#app_windres.rc = $(srcdir)dep/generated/app_windres.rc
#license.rc = $(srcdir)dep/generated/license.rc
driverlist.h = $(srcdir)dep/generated/driverlist.h
ctv.h	= $(srcdir)dep/generated/ctv.h
toa_gp9001_func.h = $(srcdir)dep/generated/toa_gp9001_func.h
neo_sprite_func.h = $(srcdir)dep/generated/neo_sprite_func.h
cave_tile_func.h = $(srcdir)dep/generated/cave_tile_func.h
cave_sprite_func.h = $(srcdir)dep/generated/cave_sprite_func.h
psikyo_tile_func.h = $(srcdir)dep/generated/psikyo_tile_func.h
pgm_sprite.h = $(srcdir)dep/generated/pgm_sprite.h
build_details.h = $(srcdir)dep/generated/build_details.h

allobj	= $(objdir)cpu/m68k/m68kcpu.o $(objdir)cpu/m68k/m68kops.o \
	  $(foreach file,$(autobj:.o=.c), \
		$(foreach dir,$(alldir),$(subst $(srcdir),$(objdir), \
		$(firstword $(subst .c,.o,$(wildcard $(srcdir)$(dir)/$(file))))))) \
	  $(foreach file,$(autobj:.o=.cpp), \
		$(foreach dir,$(alldir),$(subst $(srcdir),$(objdir), \
		$(firstword $(subst .cpp,.o,$(wildcard $(srcdir)$(dir)/$(file))))))) \
	  $(foreach file,$(autobj:.o=.asm), \
		$(foreach dir,$(alldir),$(subst $(srcdir),$(objdir), \
		$(firstword $(subst .asm,.o,$(wildcard $(srcdir)$(dir)/$(file))))))) \
	  $(foreach file,$(autobj:.o=.rc), \
		$(foreach dir,$(alldir),$(subst $(srcdir),$(objdir), \
		$(firstword $(subst .rc,.o,$(wildcard $(srcdir)$(dir)/$(file)))))))

alldep	= $(foreach file,$(autobj:.o=.c), \
		$(foreach dir,$(alldir),$(subst $(srcdir),$(objdir), \
		$(firstword $(subst .c,.d,$(wildcard $(srcdir)$(dir)/$(file))))))) \
	  $(foreach file,$(autobj:.o=.cpp), \
		$(foreach dir,$(alldir),$(subst $(srcdir),$(objdir), \
		$(firstword $(subst .cpp,.d,$(wildcard $(srcdir)$(dir)/$(file))))))) \
	  $(foreach file,$(autobj:.o=.rc), \
		$(foreach dir,$(alldir),$(subst $(srcdir),$(objdir), \
		$(firstword $(subst .rc,.d,$(wildcard $(srcdir)$(dir)/$(file)))))))

#
#
#	Specify compiler/linker/assembler
#
#

HOSTCC	= gcc
HOSTCXX	= g++

ifeq ($(ARCH), i386)
CC	= gcc
CXX	= g++
LD	= $(CXX)
AS	= nasm
CFLAGS	 	= -mmmx -m32
CXXFLAGS 	= -mmmx -m32

LDFLAGS += -L$(LIBDIR)

else
CC	= gcc
CXX	= g++
LD	= $(CXX)
AS	= nasm
CFLAGS		= -mmmx -m64 \
				  -U__cdecl -U__fastcall -D__cdecl="" -D__fastcall=""
CXXFLAGS 	= -mmmx -m64 \
				  -U__cdecl -U__fastcall -D__cdecl="" -D__fastcall=""

endif

HOSTCFLAGS = $(incdir)
CFLAGS += -O2 -fomit-frame-pointer -Wno-write-strings -DLSB_FIRST -DFASTCALL -DBUILD_M68K -DINCLUDE_LIB_PNGH
CXXFLAGS += -O2 -fomit-frame-pointer -Wno-write-strings -DLSB_FIRST -DFASTCALL -DBUILD_M68K -DINCLUDE_LIB_PNGH
DEF := -DCPUTYPE=$(CPUTYPE) -DUSE_SPEEDHACKS -DBUILD_SDL

ifdef SPECIALBUILD
	DEF	:= $(DEF) -DSPECIALBUILD=$(SPECIALBUILD)
endif

ifdef	DEBUG
	DEF	:= $(DEF) -D_DEBUG
	CFLAGS += -g
	CXXFLAGS += -g
endif

ifdef BUILD_X86_ASM
	DEF := $(DEF) -DBUILD_X86_ASM
endif

ifdef	MMX
	DEF	+= -DMMX
endif

DEF    := $(DEF) -DFILENAME=$(NAME)

CFLAGS += $(DEF) $(incdir)
CXXFLAGS += $(DEF) $(incdir)

ifndef DEBUG
LDFLAGS += -s
endif
ASFLAGS += -O1

ifeq ($(OS),Windows_NT)
CFLAGS_CONSOLE = -mno-cygwin -mconsole -pipe -Wall -W $(DEF) $(incdir)
endif

ASFLAGS += -f $(FILEFORMAT)

#
#
#	Specify paths
#
#

vpath %.asm	$(foreach dir,$(alldir),$(srcdir)$(dir)/ )
vpath %.cpp	$(foreach dir,$(alldir),$(srcdir)$(dir)/ )
vpath %.c	$(foreach dir,$(alldir),$(srcdir)$(dir)/ )
vpath %.h	$(foreach dir,$(alldir),$(srcdir)$(dir)/ )
vpath %.rc	$(foreach dir,$(alldir),$(srcdir)$(dir)/ )

vpath %.o 	$(foreach dir,$(alldir),$(objdir)$(dir)/ )
vpath %.d 	$(foreach dir,$(alldir),$(objdir)$(dir)/ )

#
#
#	Rules
#
#

.PHONY:	all init cleandep touch clean

ifeq ($(MAKELEVEL),1)
ifdef DEPEND

all:	init $(autdep) $(autobj)
	@$(MAKE) -f makefile.sdl
else

all:	init $(autobj)
	@$(MAKE) -f makefile.sdl
endif
else

all:	$(NAME)

endif

#
#
#	Rule for linking the executable
#
#

ifeq ($(MAKELEVEL),2)

$(NAME):	$(allobj)
	@echo
	@echo Linking executable $(NAME)...
	@$(LD) $(CFLAGS) $(LDFLAGS) -o $@ $^ $(lib)

ifdef	DEBUG

#	Don't compress when making a debug build

else
ifdef	COMPRESS
	@upx --best $@
endif
endif
endif

#
#	Generate the gamelist
#

burn.o burn.d:	driverlist.h

$(driverlist.h): $(drvobj) $(srcdir)dep/scripts/gamelist.pl
ifdef	PERL
	@perl $(srcdir)dep/scripts/gamelist.pl -o $@ -l gamelist.txt \
		$(filter %.cpp,$(foreach file,$(drvobj:.o=.cpp),$(foreach dir,$(alldir), \
		$(firstword $(wildcard $(srcdir)$(dir)/$(file))))))
else
ifeq ($(MAKELEVEL),2)
	@echo
	@echo Warning: Perl is not available on this system.
	@echo $@ cannot be updated or created!
	@echo
endif
endif

#
#	Fix the .rc file
#

resource.o resource.d:	$(app_windres.rc) version.rc version.h

$(license.rc): $(srcdir)license.txt $(srcdir)dep/scripts/license2rtf.pl $(srcdir)dep/scripts/license2rc.pl

ifdef	PERL
	@perl $(srcdir)dep/scripts/license2rtf.pl $< -o $(srcdir)dep/generated/$(@F:.rc=.rtf)
	@perl $(srcdir)dep/scripts/license2rc.pl $(srcdir)dep/generated/$(@F:.rc=.rtf) -o $@
else
ifeq ($(MAKELEVEL),2)
	@echo
	@echo Warning: Perl is not available on this system.
	@echo $@ cannot be updated or created!
	@echo
endif
endif

$(app_windres.rc): app.rc $(license.rc) $(srcdir)dep/scripts/fixrc.pl $(srcdir)burner/resource/fba.ico $(srcdir)burner/resource/about.bmp $(srcdir)burner/resource/preview.bmp $(srcdir)burner/resource/misc.bmp

ifdef	PERL
	@perl $(srcdir)dep/scripts/fixrc.pl $< -o $@
else
ifeq ($(MAKELEVEL),2)
	@echo
	@echo Warning: Perl is not available on this system.
	@echo $@ cannot be updated or created!
	@echo
endif
endif

#
#	Compile Musashi 68000 cores
#

$(objdir)cpu/m68k/m68kcpu.o: $(srcdir)cpu/m68k/m68kcpu.c $(objdir)dep/generated/m68kops.h $(srcdir)cpu/m68k/m68k.h $(srcdir)cpu/m68k/m68kconf.h
	@echo Compiling Musashi MC680x0 core \(m68kcpu.c\)...
	@$(CC) $(CFLAGS) -c $(srcdir)cpu/m68k/m68kcpu.c -o $(objdir)cpu/m68k/m68kcpu.o

$(objdir)cpu/m68k/m68kops.o: $(objdir)cpu/m68k/m68kmake $(objdir)dep/generated/m68kops.h $(objdir)dep/generated/m68kops.c $(srcdir)cpu/m68k/m68k.h $(srcdir)cpu/m68k/m68kconf.h
	@echo Compiling Musashi MC680x0 core \(m68kops.c\)...
	@$(CC) $(CFLAGS) -c $(objdir)dep/generated/m68kops.c -o $(objdir)cpu/m68k/m68kops.o

$(objdir)dep/generated/m68kops.h: $(objdir)cpu/m68k/m68kmake $(srcdir)cpu/m68k/m68k_in.c
	$(objdir)/cpu/m68k/m68kmake $(objdir)dep/generated/ $(srcdir)cpu/m68k/m68k_in.c

$(objdir)cpu/m68k/m68kmake: $(srcdir)cpu/m68k/m68kmake.c
	@echo Compiling Musashi MC680x0 core \(m68kmake.c\)...
	@$(HOSTCC) $(HOSTCFLAGS) $(srcdir)cpu/m68k/m68kmake.c -o $(objdir)cpu/m68k/m68kmake

#
#	Extra rules for generated header file cvt.h, needed by ctv.cpp
#

ctv.d ctv.o:	$(ctv.h)

$(ctv.h):	ctv_make.cpp
	@echo Generating $(srcdir)dep/generated/$(@F)...
	@$(HOSTCXX) $(LDFLAGS) $< -o $(objdir)dep/generated/ctv_make
	@$(objdir)dep/generated/ctv_make >$@

#
#	Extra rules for generated header file toa_gp9001_func.h, needed by toa_gp9001.cpp
#

toa_bcu2.d toa_bcu2.o toa_gp9001.d toa_gp9001.o: $(toa_gp9001_func.h)

$(toa_gp9001_func.h):	$(srcdir)dep/scripts/toa_gp9001_func.pl
	@$(srcdir)dep/scripts/toa_gp9001_func.pl -o $(toa_gp9001_func.h)

#
#	Extra rules for generated header file neo_sprite_func.h, needed by neo_sprite.cpp
#

neo_sprite.d neo_sprite.o: $(neo_sprite_func.h)

$(neo_sprite_func.h):	$(srcdir)dep/scripts/neo_sprite_func.pl
	@$(srcdir)dep/scripts/neo_sprite_func.pl -o $(neo_sprite_func.h)

#
#	Extra rules for generated header file cave_tile_func.h, needed by cave_tile.cpp
#

cave_tile.d cave_tile.o: $(cave_tile_func.h)

$(cave_tile_func.h):	$(srcdir)dep/scripts/cave_tile_func.pl
	@perl $(srcdir)dep/scripts/cave_tile_func.pl -o $(cave_tile_func.h)

#
#	Extra rules for generated header file cave_sprite_func.h, needed by cave_sprite.cpp
#

cave_sprite.d cave_sprite.o: $(cave_sprite_func.h)

$(cave_sprite_func.h):	$(srcdir)dep/scripts/cave_sprite_func.pl
	@perl $(srcdir)dep/scripts/cave_sprite_func.pl -o $(cave_sprite_func.h)

#
#	Extra rules for generated header file psikyo_tile_func.h / psikyo_sprite_func.h, needed by psikyo_tile.cpp / psikyo_sprite.cpp
#

psikyo_tile.d psikyo_tile.o psikyosprite.d psikyo_sprite.o: $(psikyo_tile_func.h)

$(psikyo_tile_func.h):	$(srcdir)dep/scripts/psikyo_tile_func.pl
	@perl $(srcdir)dep/scripts/psikyo_tile_func.pl -o $(psikyo_tile_func.h)

#
#	Extra rules for generated header file pgm_sprite.h, needed by pgm_draw.cpp
#

pgm_draw.d pgm_draw.o:	$(pgm_sprite.h)

$(pgm_sprite.h):	pgm_sprite_create.cpp
	@echo Generating $(srcdir)dep/generated/$(@F)...
	@$(HOSTCXX) $(LDFLAGS) $< -o $(objdir)dep/generated/pgm_sprite_create
	@$(objdir)dep/generated/pgm_sprite_create >$@

ifeq ($(MAKELEVEL),2)
ifdef DEPEND

include	$(alldep)

endif
endif

#
#	Generic rule for resource files
#

%.o:	%.rc
	@echo Compiling resource file $(<F)...
	@windres $(DEF) $< -o $(subst $(srcdir),$(objdir),$(<D))/$(@F) $(foreach dir,$(alldir),--include-dir $(srcdir)$(dir))

#
#	Generic rules for C/C++ files
#

ifeq ($(MAKELEVEL),1)

ifdef FORCE_UPDATE
resource.o: FORCE
about.o: FORCE
endif

%.o:	%.cpp
	@echo Compiling $<...
	@$(CXX) $(CXXFLAGS) -c $< -o $(subst $(srcdir),$(objdir),$(<D))/$(@F)

%.o:	%.c
	@echo Compiling $<...
	@$(CC) $(CFLAGS) -Wno-unused -Wno-conversion -Wno-missing-prototypes -c $< -o $(subst $(srcdir),$(objdir),$(<D))/$(@F)

%.o:	%.asm
	@echo Assembling $<...
	@$(AS) $(ASFLAGS) $< -o $(subst $(srcdir),$(objdir),$(<D))/$(@F)

else

%.o:	%.c
	@echo Compiling $<...
	@$(CC) $(CFLAGS) -Wno-unused -Wno-conversion -Wno-missing-prototypes -c $< -o $@

%.o:	%.asm
	@echo Assembling $<...
	@$(AS) $(ASFLAGS) $< -o $@

%.o:
	@echo Compiling $<...
	@$(CC) $(CXXFLAGS) -c $< -o $@

endif

#
#	Generate dependencies for C/C++ files
#

ifdef DEPEND

%.d:	%.c
	@echo Generating depend file for $<...
	@$(CC) -MM -MT "$(subst $(srcdir),$(objdir),$(<D))/$(*F).o $(subst $(srcdir),$(objdir),$(<D))/$(@F)" -x c++ $(CFLAGS) $< >$(subst $(srcdir),$(objdir),$(<D))/$(@F)

%.d:	%.cpp
	@echo Generating depend file for $<...
	@$(CXX) -MM -MT "$(subst $(srcdir),$(objdir),$(<D))/$(*F).o $(subst $(srcdir),$(objdir),$(<D))/$(@F)" -x c++ $(CXXFLAGS) $< >$(subst $(srcdir),$(objdir),$(<D))/$(@F)

%.d:	%.rc
	@echo Generating depend file for $<...
	@$(CC) -MM -MT "$(subst $(srcdir),$(objdir),$(<D))/$(*F).o $(subst $(srcdir),$(objdir),$(<D))/$(@F)" -x c++ $(CFLAGS) $< >$(subst $(srcdir),$(objdir),$(<D))/$(@F)

endif

#
#	Phony targets
#

init:

ifdef	DEBUG
	@echo Making debug build...
else
	@echo Making normal build...
endif
	@echo
	@mkdir -p $(foreach dir, $(alldir),$(objdir)$(dir))
	@mkdir -p $(srcdir)dep/generated

cleandep:
	@echo Removing depend files from $(objdir)...
	@for dir in $(alldir); do rm -f $(objdir)$$dir/*.d; done

touch:
	@echo Marking all targets for $(NAME) as uptodate...
	@for dir in $(alldir); do touch -c $(objdir)$$dir/*; done
	@do touch -c $(srcdir)/generated/*
	@touch $(NAME).exe
install:
	mkdir -p $(INSTALLDIR)
	mkdir -p $(ROMDIR)
	cp $(EXE) $(INSTALLDIR)
	cp $(FILES) $(INSTALLDIR)
	ln -fs $(INSTALLDIR)$(EXE) $(BINDIR)$(EXE)

clean:
	@echo Removing all files from $(objdir)...
	@rm -f -r $(objdir)
	@rm -f -r $(ctv.h)

ifdef	PERL
	@echo Removing all files generated with perl scripts...
	@rm -f -r $(app_windres.rc) $(driverlist)
endif
	@echo Removing executable file...
	@rm -f $(EXE)

#
#	Rule to force recompilation of any target that depends on it
#

FORCE:
